import random
import numpy as np
from deap import base, creator, tools, algorithms

# Problem setup: We'll try to minimize the sphere function (sum of squares)
def evaluate(individual):
    return sum(x**2 for x in individual),

# Create types for fitness and individuals
creator.create("FitnessMin", base.Fitness, weights=(-1.0,))
creator.create("Individual", list, fitness=creator.FitnessMin)

# Initialize toolbox
toolbox = base.Toolbox()

# Attribute generator (define genes as floats in [-5, 5])
toolbox.register("attr_float", random.uniform, -5, 5)

# Structure initializers
toolbox.register("individual", tools.initRepeat, creator.Individual, 
                 toolbox.attr_float, n=10)  # 10-dimensional problem
toolbox.register("population", tools.initRepeat, list, toolbox.individual)

# Operator registration
toolbox.register("mate", tools.cxBlend, alpha=0.5)  # Blend crossover
toolbox.register("mutate", tools.mutGaussian, mu=0, sigma=1, indpb=0.2)
toolbox.register("select", tools.selTournament, tournsize=3)
toolbox.register("evaluate", evaluate)

def main():
    # Create population
    pop = toolbox.population(n=50)
    
    # Statistics
    stats = tools.Statistics(lambda ind: ind.fitness.values)
    stats.register("avg", np.mean)
    stats.register("std", np.std)
    stats.register("min", np.min)
    stats.register("max", np.max)
    
    # Run algorithm
    result, logbook = algorithms.eaSimple(pop, toolbox, cxpb=0.5, mutpb=0.2, 
                                          ngen=50, stats=stats, verbose=True)
    
    # Print best individual
    best_ind = tools.selBest(result, k=1)[0]
    print(f"\nBest individual is {best_ind}, fitness = {best_ind.fitness.values[0]}")
    
    return result, logbook

if __name__ == "__main__":
    result, logbook = main()
